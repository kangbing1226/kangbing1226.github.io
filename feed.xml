<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>drsinBlog</title>
    <description>我不生产代码，只是github的搬用工   
</description>
    <link>http://ninowon.com/</link>
    <atom:link href="http://ninowon.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Jun 2017 16:39:50 +0800</pubDate>
    <lastBuildDate>Thu, 22 Jun 2017 16:39:50 +0800</lastBuildDate>
    <generator>Jekyll v3.4.3</generator>
    
      <item>
        <title>linux</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#c语言基础&quot; id=&quot;markdown-toc-c语言基础&quot;&gt;c语言基础&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#liunx-shell&quot; id=&quot;markdown-toc-liunx-shell&quot;&gt;liunx shell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;c语言基础&quot;&gt;c语言基础&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drsin/linuxCoreLearn/tree/master/c/dataType&quot;&gt;数据类型&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drsin/linuxCoreLearn/tree/master/c/PrintSacnf&quot;&gt;输入输出&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drsin/linuxCoreLearn/tree/master/c/baePractice&quot;&gt;基础练习&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/drsin/linuxCoreLearn/tree/master/c/sysCall&quot;&gt;系统调用&lt;/a&gt;
    &lt;h3 id=&quot;liunx-shell&quot;&gt;liunx shell&lt;/h3&gt;
  &lt;/li&gt;
  &lt;li&gt;kernel的版本
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;uname -a 可以查看linux内核版本
X-window 下创建的终端是虚拟终端
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;配置网络
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /etc/sysconf/network-script/ifcfg-eth0
如果想使用图形化界面setup
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;man linux中的帮助手册&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;分为8章： 		
第1章 Linux系统命令的帮助 	
第2章 Linux系统API的帮助手册		 		
第3章 C库函数的帮助 		
第5章系统配置文件的帮助 		
第7章 某一主题的帮助 		
第8章 系统管理的命令 
命令组成 cmd [option [argument]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;pwd命令，查看当前路径&lt;/li&gt;
  &lt;li&gt;ls 查看目录下的文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;单敲一个ls，只显示当前目录下的文件 	默认不显示隐藏文件，想显示用-a选项 	
-d显示目录本身的信息 	多个选项可以合并着写 -ld
一个目录创建后，会自动创建两个目录，
.  代表本目录 	.. 代表上级目录 	最顶层的..就是自身
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;mv 文件的移动或改名&lt;/li&gt;
  &lt;li&gt;cp source dest 把source拷贝到dest&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-r 拷贝目录
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;touch 创建文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;更新文件最后修改时间
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;cd改变当前目录到制定的目录&lt;/li&gt;
  &lt;li&gt;mkdir 创建目录&lt;/li&gt;
  &lt;li&gt;rmdir 只能删除空目录&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rm -rf 删除非空目录&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;cat 显示文件的内容&lt;/li&gt;
  &lt;li&gt;more 分屏显示文件内容,空格显示下一屏，b上一屏&lt;/li&gt;
  &lt;li&gt;alias 起别名
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;linux有个习惯：在终端设置的信息只在本终端有效，离开终端就无效,如果想让设置永久生效，得修改配置文件,但是不立即生效，下一次用就生效了
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;useradd 用户名 添加新用户&lt;/li&gt;
  &lt;li&gt;passwd 修改用户密码&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;userdel -r 删除用户&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;hostname&lt;/li&gt;
  &lt;li&gt;id显示用户信息&lt;/li&gt;
  &lt;li&gt;whoami&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;date 显示时间&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;shutdow -h now 发送广播信息&lt;/li&gt;
  &lt;li&gt;init 0   关闭系统的所有服务&lt;/li&gt;
  &lt;li&gt;halt -p  关闭电源&lt;/li&gt;
  &lt;li&gt;shutdown -r now&lt;/li&gt;
  &lt;li&gt;init 6&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;reboot&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;创建一个用户&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在/home/创建一个目录,并且添加一些隐藏文件,这些隐藏文件来自/etc/skel/.*  
chown -R xiaoyan.xiaoyan  .
在/etc/passwd文件中添加一行记录
在/etc/shadow文件中添加一条记录
在/etc/group中添加一条组的信息
在/etc/gshadow文件中添加一条记录
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;groupadd&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;将一个用户加入到一个组，在group文件中对应的组后面添加上用户名，如果添加多个用户用逗号分割，
 管理员的组id等于0，其他用户加入到这组也不是管理员
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;-rw-r–r–. 1 root    root     1045 7月  15 14:13 day02.txt&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;第一列 文件的类型
普通文件
d 目录文件
l 软链接文件
p 管道文件
b 块设备文件
c 字符设备文件
s socket文件	
  own        grp       othr
  r w -     r - -     r - -
  | | |
  | | |
  | | \_执行
  | \___写
  \_____读
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;chmod 修改文件的权限&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; chmod 谁-/+/=权限  文件
		  o       r
          g       w
          u       x
          a
	+ 在原有的权限基础上添加新的权限
	- 在原有的权限基础上取消对应的权限
	= 取消原有权限设置为新的权限

	t 粘帖位
	s 用户设置位
	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;程序在执行过程中存在两个用户:实际用户,有效用户

- 硬链接数
	硬链接文件不能跨分区
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;which 查找命令在哪里&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;whereis 查找命令在哪里，比which多了关于帮助的位置&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;find 找文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	-name
	-type
	-user
	-group
	-mtime
		+n 更新时间距离现在n天前
		-n 更改时间距离现在n天内
	多个查找条件可以用 -a -o
- grep 查找文件中的内容
	如果要递归查找子目录 -r
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;tar 打包&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	tar -cvf 打包
	gzip 压缩成 tar.gz
	bzip2 压缩程 tar.bz2

	tar -jcvf tar.bz2
	tar -zcvf tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;head 显示文件的开始若干行,默认10行&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tail 显示文件末尾的若干行&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;cut 显示文件某些列 -d列的分割符号 -f要显示的列&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;sort -t -k -n&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;uniq 过滤相邻的重复行&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;wc 用于统计行数，单词数，字符数
   -l
   -c
   -w&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;sed 流式编辑器&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 逐行读取文件中的内容存储到临时缓存，接着用sed命令处理缓存中的内容，处理完成以后，把缓存中的内容送到屏幕，接着处理下一行，直到文件末尾，对源文件的内容没有改变。
 -n 不打印 	
用法 sed [选项] 命令 文件 
	sed '4,$d' day03.txt 	从第4行到最后一行删除 
	sed '3q' day03.txt 		处理完第三行时退出 	
	sed 's/3/三/' note.txt 		将每行的第一个3替换成三
	sed 's/3/三/g' note.txt 		将所有的3替换成三
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;awk 处理数据和生成报告的编程语言&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awk比sed多了列处理功能

awk [option] awk_script files
	-F 指定输入记录分段的分割符
	-f 从指定的awk脚本读

awk -F: '{print $1}' /etc/passwd

		awk -F: 'BEGIN{}
		/pattern/{}
		END{}'  /etc/passwd

正则表达式
	\&amp;lt;\&amp;gt;匹配单词
	.* 任意多个任意字符
	.  任意单个字符
	^  行首
	
输入输出重定向
ls 从磁盘读，向屏幕写
cat 从文件读，向屏幕写

输入：数据来源
输出：数据去向
我们将有输入输出的命令叫过滤器

标准的输入 0 stdin
标准的输出 1 stdout
标准的错误 2 stderr

改变输入输出方向叫重定向
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;进程优先级 nice&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前后台进程&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;amp;  把进程放入后台
jobs 查看后台有哪些进程
fg %i 把i号进程从后台搬到前台
ctrl+z 把前台进程拿到后台
bf %i 将后台i号进程运行起来

如果想在离开shell终端时，后台进程继续运行
nohup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 16 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://ninowon.com/liunx/2017/06/16/linux-shell.html</link>
        <guid isPermaLink="true">http://ninowon.com/liunx/2017/06/16/linux-shell.html</guid>
        
        <category>liunx</category>
        
        
        <category>liunx</category>
        
      </item>
    
      <item>
        <title>C语言系统调用</title>
        <description>
&lt;p&gt;&lt;strong&gt;fgets&lt;/strong&gt;
头文件：include&lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;

&lt;p&gt;定义函数：har * fgets(char * s, int size, FILE * stream);&lt;/p&gt;

&lt;p&gt;函数说明：fgets()用来从参数stream 所指的文件内读入字符并存到参数s 所指的内存空间, 直到出现换行字符、读到文件尾或是已读了size-1 个字符为止, 最后会加上NULL 作为字符串结束.&lt;/p&gt;

&lt;p&gt;返回值：gets()若成功则返回s 指针, 返回NULL 则表示有错误发生.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

int main( void )
{
	char buf[1024] = {};
	
	//gets(buf);//丢弃\n
	fgets(buf, 1024, stdin);//不丢弃\n
	int n = strlen(buf);
	//printf(&quot;len=%d,buf=%s\n&quot;, n, buf);
	buf[n-1] = 0;
	puts(buf);//自动加\n
	//fputs(buf, stdout);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;open&lt;/strong&gt;
头文件：#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;

&lt;p&gt;fopen()是一个常用的函数，用来以指定的方式打开文件，其原型为：
    FILE * fopen(const char * path, const char * mode);&lt;/p&gt;

&lt;p&gt;【参数】path为包含了路径的文件名，mode为文件打开方式。&lt;/p&gt;

&lt;p&gt;mode有以下几种方式：
打开方式	说明&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;r	以只读方式打开文件，该文件必须存在。
-r+	以读/写方式打开文件，该文件必须存在。 rb+	以读/写方式打开一个二进制文件，只允许读/写数据。 rt+	以读/写方式打开一个文本文件，允许读和写。 w	打开只写文件，若文件存在则长度清为0，即该文件内容消失，若不存在则创建该文件。
w+	打开可读/写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。
a	以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留（EOF符保留)。
a+	以附加方式打开可读/写的文件。若文件不存在，则会建立该文件，如果文件存在，则写入的数据会被加到文件尾后，即文件原先的内容会被保留（原来的EOF符
不保留)。 wb	以只写方式打开或新建一个二进制文件，只允许写数据。 wb+	以读/写方式打开或建立一个二进制文件，允许读和写。
wt+	以读/写方式打开或建立一个文本文件，允许读写。 at+	以读/写方式打开一个文本文件，允许读或在文本末追加数据。
ab+	以读/写方式打开一个二进制文件，允许读或在文件末追加数据。 在POSIX 系统，包含Linux 下都会忽略 b
字符。由fopen()所建立的新文件会具有S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH(0666)权限，此文件权限也会参考umask
值。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;二进制和文本模式的区别：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在windows系统中，文本模式下，文件以”\r\n”代表换行。若以文本模式打开文件，并用fputs等函数写入换行符”\n”时，函数会自动在”\n”前面加上”\r”。即实际写入文件的是”\r\n”
。 在类Unix/Linux系统中文本模式下，文件以”\n”代表换行。所以Linux系统中在文本模式和二进制模式下并无区别&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;【返回值】文件顺利打开后，指向该流的文件指针就会被返回。若果文件打开失败则返回NULL，并把错误代码存在errno 中。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

int main( void )
{
	FILE *fp = fopen(&quot;hehe.txt&quot;, &quot;w&quot;);
	if ( fp == NULL )
		exit(EXIT_FAILURE);

	fprintf(fp, &quot;how are your!&quot;);
	
	fclose(fp);
	
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;malloc()&lt;/strong&gt; 
头文件：#include &lt;stdlib.h&gt;&lt;/stdlib.h&gt;&lt;/p&gt;

&lt;p&gt;malloc() 函数用来动态地分配内存空间（如果你不了解动态内存分配，请查看：C语言动态内存分配及变量存储类别），其原型为：
void* malloc (size_t size);&lt;/p&gt;

&lt;p&gt;【参数说明】size 为需要分配的内存空间的大小，以字节（Byte）计。&lt;/p&gt;

&lt;p&gt;【函数说明】malloc() 在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。如果希望在分配内存的同时进行初始化，请使用 calloc() 函数。&lt;/p&gt;

&lt;p&gt;【返回值】分配成功返回指向该内存的地址，失败则返回 NULL。&lt;/p&gt;

&lt;p&gt;由于申请内存空间时可能有也可能没有，所以需要自行判断是否申请成功，再进行后续操作。&lt;/p&gt;

&lt;p&gt;如果 size 的值为 0，那么返回值会因标准库实现的不同而不同，可能是 NULL，也可能不是，但返回的指针不应该再次被引用。&lt;/p&gt;

&lt;p&gt;注意：函数的返回值类型是 void *，void 并不是说没有返回值或者返回空指针，而是返回的指针类型未知。所以在使用 malloc() 时通常需要进行强制类型转换，将 void 指针转换成我们希望的类型，例如：
纯文本复制
char *ptr = (char *)malloc(10);  // 分配10个字节的内存空间，用来存放字符
头文件：#include &lt;string.h&gt;
**memset**
memset() 函数用来将指定内存的前n个字节设置为特定的值，其原型为：
    void * memset( void * ptr, int value, size_t num );&lt;/string.h&gt;&lt;/p&gt;

&lt;p&gt;参数说明：
ptr 为要操作的内存的指针。
value 为要设置的值。你既可以向 value 传递 int 类型的值，也可以传递 char 类型的值，int 和 char 可以根据 ASCII 码相互转换。
num 为 ptr 的前 num 个字节，size_t 就是unsigned int。&lt;/p&gt;

&lt;p&gt;【函数说明】memset() 会将 ptr 所指的内存区域的前 num 个字节的值都设置为 value，然后返回指向 ptr 的指针。&lt;/p&gt;

&lt;p&gt;memset() 可以将一段内存空间全部设置为特定的值，所以经常用来初始化字符数组。例如：
char str[20];
memset(str, ‘\0’, sizeof(str)-1);&lt;/p&gt;

&lt;p&gt;【返回值】返回指向 ptr 的指针。&lt;/p&gt;

&lt;p&gt;注意：参数 value 虽声明为 int，但必须是 unsigned char，所以范围在0 到255 之间。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;assert.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

typedef struct student {
	int id;
	char name[20];
	struct student *next;
} stu_t;

void input(stu_t **ph) {
	stu_t *p = *ph;
	stu_t *t=(stu_t*)malloc(sizeof(stu_t));
	assert(t);
	memset(t, 0x00, sizeof(stu_t));
	printf(&quot;input name: &quot;);
	scanf(&quot;%s&quot;, t-&amp;gt;name);
	printf(&quot;input id: &quot;);
	scanf(&quot;%d&quot;, &amp;amp;t-&amp;gt;id);
	
	if ( p == NULL ) {
		*ph = t;
	} else {	
		while ( p-&amp;gt;next != NULL )
			p = p-&amp;gt;next;
		p-&amp;gt;next = t;
	}
}

void front(stu_t **ph)
{
	stu_t *p = malloc(sizeof(stu_t));
	assert(p);
	
	memset(p, 0x00, sizeof(stu_t));
	printf(&quot;input name: &quot;);
	scanf(&quot;%s&quot;, p-&amp;gt;name);
	printf(&quot;input id: &quot;);
	scanf(&quot;%d&quot;, &amp;amp;p-&amp;gt;id);
	
	p-&amp;gt;next = *ph;
	*ph = p;
}

void output(stu_t *h)
{
	while ( h != NULL ) {
		printf(&quot;%d %s\n&quot;, h-&amp;gt;id, h-&amp;gt;name);
		h = h-&amp;gt;next;
	}
}

int main( void )
{
	char c;
	stu_t *head = NULL;
	while ( 1 ) {
		printf(&quot;I input other exit\n&quot;);
		scanf(&quot; %c&quot;, &amp;amp;c);
		if ( c!='i' &amp;amp;&amp;amp; c!='I')
			break;
		//input(&amp;amp;head);
		front(&amp;amp;head);
	}
	output(head);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;sscanf&lt;/strong&gt;
头文件：#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;

&lt;p&gt;sscanf()函数用于从字符串中读取指定格式的数据，其原型如下：
    int sscanf (char *str, char * format [, argument, …]);&lt;/p&gt;

&lt;p&gt;【参数】参数str为要读取数据的字符串；format为用户指定的格式；argument为变量，用来保存读取到的数据。&lt;/p&gt;

&lt;p&gt;【返回值】成功则返回参数数目，失败则返回-1，错误原因存于errno 中。&lt;/p&gt;

&lt;p&gt;sscanf()会将参数str 的字符串根据参数format（格式化字符串）来转换并格式化数据（格式化字符串请参考scanf()）， 转换后的结果存于对应的变量中。&lt;/p&gt;

&lt;p&gt;sscanf()与scanf()类似，都是用于输入的，只是scanf()以键盘(stdin)为输入源，sscanf()以固定字符串为输入源
&lt;strong&gt;fprintf&lt;/strong&gt;
头文件：#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;

&lt;p&gt;定义函数：int fprintf(FILE * stream, const char * format, …);&lt;/p&gt;

&lt;p&gt;函数说明：fprintf()会根据参数format 字符串来转换并格式化数据, 然后将结果输出到参数stream 指定的文件中, 直到出现字符串结束(‘\0’)为止。&lt;/p&gt;

&lt;p&gt;返回值：关于参数format 字符串的格式请参考printf(). 成功则返回实际输出的字符数, 失败则返回-1, 错误原因存于errno 中.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main( void )
{
	char buf[] = &quot;lilei 123|45.3&quot;;
	int i;
	double d;
	char name[10] = {};
	
	sscanf(buf, &quot;%s%d|%lf&quot;, name, &amp;amp;i, &amp;amp;d);
	fprintf(stdout, &quot;name=%s,i=%d,d=%f\n&quot;, name, i, d);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;sprintf&lt;/strong&gt;
头文件：#include &lt;stdio.h&gt;&lt;/stdio.h&gt;&lt;/p&gt;

&lt;p&gt;sprintf()函数用于将格式化的数据写入字符串，其原型为：
    int sprintf(char *str, char * format [, argument, …]);&lt;/p&gt;

&lt;p&gt;【参数】str为要写入的字符串；format为格式化字符串，与printf()函数相同；argument为变量。&lt;/p&gt;

&lt;p&gt;除了前两个参数类型固定外，后面可以接任意多个参数。而它的精华，显然就在第二个参数–格式化字符串–上。 printf()和sprintf()都使用格式化字符串来指定串的格式，在格式串内部使用一些以“%”开头的格式说明符（format specifications）来占据一个位置，在后边的变参列表中提供相应的变量，最终函数就会用相应位置的变量来替代那个说明符，产生一个调用者想要的字符串。&lt;/p&gt;

&lt;p&gt;sprintf()最常见的应用之一莫过于把整数打印到字符串中，如：
    sprintf(s, “%d”, 123);  //把整数123打印成一个字符串保存在s中
    sprintf(s, “%8x”, 4567);  //小写16进制，宽度占8个位置，右对齐&lt;/p&gt;

&lt;p&gt;sprintf的作用是将一个格式化的字符串输出到一个目的字符串中，而printf是将一个格式化的字符串输出到屏幕。sprintf的第一个参数应该是目的字符串，如果不指定这个参数，执行过程中出现 “该程序产生非法操作,即将被关闭….”的提示。&lt;/p&gt;

&lt;p&gt;sprintf()会根据参数format 字符串来转换并格式化数据，然后将结果复制到参数str 所指的字符串数组，直到出现字符串结束(‘\0’)为止。关于参数format 字符串的格式请参考printf()。&lt;/p&gt;

&lt;p&gt;【返回值】成功则返回参数str 字符串长度，失败则返回-1，错误原因存于errno 中&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main( void )
{
	int i = 123;
	double d = 99.99;
	char *name = &quot;furong&quot;;
	char buf[1024] = {};
	
	sprintf(buf, &quot;name=%s|i=%d|d=%f|&quot;, name, i, d);
	sprintf(buf, &quot;%d&quot;, 123);
	printf(&quot;buf=%s\n&quot;, buf);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;##特殊输入&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main( void )
{
	int x, y;
	
/*
	scanf(&quot;%2d%2d&quot;, &amp;amp;x, &amp;amp;y);
	printf(&quot;x=%d,y=%d\n&quot;, x, y);
	scanf(&quot;%*d%d&quot;, &amp;amp;x);
	printf(&quot;x=%d\n&quot;, x);
*/
	
	char c;
	char str[100];
	scanf(&quot;%[^\n]&quot;, str); //读取[]里面有的字符
	scanf(&quot;%*c%c&quot;, &amp;amp;c);
	scanf(&quot;%*[^\n]&quot;); scanf(&quot;%*c&quot;);
	printf(&quot;str=%s\n&quot;, str);
	printf(&quot;c=[%c]\n&quot;, c);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 16 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://ninowon.com/c%E8%AF%AD%E8%A8%80/2017/06/16/C%E8%AF%AD%E8%A8%80%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8.html</link>
        <guid isPermaLink="true">http://ninowon.com/c%E8%AF%AD%E8%A8%80/2017/06/16/C%E8%AF%AD%E8%A8%80%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8.html</guid>
        
        <category>C语言</category>
        
        
        <category>C语言</category>
        
      </item>
    
      <item>
        <title>C语言数据类型</title>
        <description>
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;整数在计算机内部的表示形式是二进制&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; 1  0  0  1
1X2^3 + 0X2^2 + 0X2^1 + 1X2^0	
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;最高位是符号位 0正 1负&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-1+1 本该等于0 但是按照相加原理得到值为-2
  1000 0001    -1
+ 0000 0001     1
  ---------------
  1000 0010    -2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;计算机为了处理这种情况设计了源码，补码和反码&lt;/strong&gt;
&lt;strong&gt;机器数的补码可由原码得到。如果机器数是正数，则该机器数的补码与原码一样,如果机器数是负数，则该机器数的补码是对它的原码（除符号位外）各位取反，并在未位加1而得到的；&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1111 1111   -1[补]
0000 0001    1[原]
------------
0000 0000    0

1000 0101 -5
1000 0111 -7

1111 1011   -5[补]
1111 1001   -7[补]
------------------
1111 0100   
1000 1100  -12 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;unsigned int&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0000 0000-1111 1111  [ 0-255 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;int&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1111 1111 -  0111 1111         [-128 - 127 ]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;字符 每个字符都有一个编码叫ASCII编码&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'a'-'z'   97-122
'A'-'Z'   65-90
'0'-'9'   48-57
'\r'  13
'\n'  10
'\t'   9
'\0'   0
	' '   32
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;用字符用的是编码，不是图案，所以可以当整数用&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;从字符到整数的转换 '6'-'0'
				 6 +'0'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gb2312
char
int 4B  -2G - 2G-1
short 2B -32768 +32767  0  65535

unsigned short int
unsigned int
unsigned char
unsigned long int

[signed] int
[signed] short [int]

long long  8字节 

char &amp;lt;= short &amp;lt;= int &amp;lt;= long
float  
1   
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;小数溢出 无穷 INF&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3.5 double 
3.5F float
3.5L long double

35 int
35L long int
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;没有真假类型 C语言用数值表示真假，非0就是真，0就是假&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10 '\0' '0' 0

0.0001

char 
short 

int 
long 

float 
double 

printf(&quot;12%dhehe&quot;, 3);
%i
%d
%hd
%hhd
%c
%u
%ld
%#x %#X
%#o

%f
%lf
%g
%e

%s
%p

int age price float;

int iAge;
float fPrice;
double dIncome;

int my_name;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 16 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://ninowon.com/c%E8%AF%AD%E8%A8%80/2017/06/16/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</link>
        <guid isPermaLink="true">http://ninowon.com/c%E8%AF%AD%E8%A8%80/2017/06/16/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html</guid>
        
        <category>C语言</category>
        
        
        <category>C语言</category>
        
      </item>
    
      <item>
        <title>C语言基础练习</title>
        <description>
&lt;p&gt;&lt;strong&gt;汉诺塔&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

void move(char x, char y)
{
	static int cnt = 0;
	printf(&quot;%d %c =&amp;gt; %c\n&quot;, ++cnt, x, y);
}

void hanno(int n, char a, char b, char c)
{
	if ( n == 1 )
		move(a, c);
	else {
		hanno(n-1, a, c, b);
		move(a, c);
		hanno(n-1, b, a, c);
	}
}

int main( void )
{
	hanno(3, 'A', 'B', 'C');
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;百鸡百钱&lt;/strong&gt;
鸡翁一值钱五——公鸡五文一只，而百钱买百鸡（100文钱买鸡），所以公鸡数量要至少小于20&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main( void )
{
	int x;
	int y;
	int z;

	for (x=0; x&amp;lt;=100; x++)
	{
		for (y=0; y&amp;lt;=100; y++)
		{
			z = 100-x-y;
			if (z%3==0 &amp;amp;&amp;amp; 5*x+3*y+z/3==100)
			{
				printf(&quot;公鸡%d,母鸡%d,小鸡%d\n&quot;,
					x, y, z);
			}
		}
	}

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;常胜将军&lt;/strong&gt;
现有21根火柴，两人轮流取，每人每次可以取走1至4根，不可多取，也不能不取，谁取最后一楰火柴谁输。请编写一个程序进行人机对弈，要求人先取，计算机后取；计算机一方为“常胜将军”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main( void )
{
	int last = 21;
	int user;
	int computer;

	for ( ; ; ) {
		printf(&quot;还剩%d根火柴!\n&quot;, last);
		printf(&quot;用户取几根? &quot;);
		scanf(&quot;%d&quot;, &amp;amp;user);
		if ( user&amp;lt;1 || user&amp;gt;4 || user&amp;gt;last)
			continue;
		printf(&quot;你取了%d根火柴!\n&quot;, user);
		last -= user;
		if ( last == 0) {
		  printf(&quot;你取走了最后一支火柴,你失败!\n&quot;);
		  break;
		}
	
		computer = 5 - user;
		printf(&quot;计算机取了%d根火柴!\n&quot;, computer);
		last -= computer;
	}

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;约瑟夫环&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;已知n个人（以编号1，2，3…n分别表示）围坐在一张圆桌周围。从编号为k的人开始报数，数到m的那个人出列；他的下一个人又从1开始报数，数到m的那个人又出列；依此规律重复下去，直到圆桌周围的人全部出列&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
int main( void ) {
	int i = -1;
	int j = 0;
	int kill = 0; //跳海的人数，用于控制循环结束
	int a[8] = {1,2,3,4,5,6,7,8};
	
	while ( kill &amp;lt; 8 ) {
	
		//for用于找到第三个离开的人
		for (j=0; j&amp;lt;=2; ) {
			i = (i+1)%8; //让i在0-7之间找下一个
			if (a[i] != -1 )
				j++;
		}

		printf(&quot;%d &quot;, a[i]);
		a[i] = -1; //离开后位置用-1表示
		kill ++; //跳海人数+1
	}
	printf(&quot;\n&quot;);
	
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;最大公约数&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main( void )
{
	int m;
	int n;
	int r;

	printf(&quot;求最大公约数!\n&quot;);
	printf(&quot;请输入两个数:&quot;);
	scanf(&quot;%d%d&quot;, &amp;amp;m, &amp;amp;n);

	r = m%n;
	while ( r != 0 )
	{
		m = n;
		n = r;
		r = m%n;
	}

	printf(&quot;最大公约数是%d\n&quot;, n);

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Fri, 16 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://ninowon.com/c%E8%AF%AD%E8%A8%80/2017/06/16/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0.html</link>
        <guid isPermaLink="true">http://ninowon.com/c%E8%AF%AD%E8%A8%80/2017/06/16/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0.html</guid>
        
        <category>C语言</category>
        
        
        <category>C语言</category>
        
      </item>
    
      <item>
        <title>银联前置系统</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#系统概述&quot; id=&quot;markdown-toc-系统概述&quot;&gt;系统概述:&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#系统架构&quot; id=&quot;markdown-toc-系统架构&quot;&gt;系统架构&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;系统概述&quot;&gt;系统概述:&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;银行卡前置系统&lt;/strong&gt;(TOPFe)是针对中国银联接口规范2.0而整合的银行卡交易处理系统，整个系统分为5个子系统：银联前置系统（NCUP）、ATM前置系统（ATMP）、POS前置系统（POSP）、加密处理系统（HSM）、批处理系统（BATCH）。
介于中国银联处理系统和银行帐务主机处理系统之间的一个交易处理系统，它完成跨行交易（包括本代他，他代本）的处理和转接的功能。若与其他两个子系统（ATM前置系统、POSP前置系统）整合使用，银联前置系统还可以提供本行卡交易（本代本）处理模块。
ATM前置系统：ATM机具的接入，管理和监控ATM设备，转发ATM上进行的交易。
&lt;strong&gt;POS前置系统&lt;/strong&gt;：POS机具的接入，管理POS设备信息，转发POS上进行的交易。
&lt;strong&gt;加密处理系统&lt;/strong&gt;（HSM）：向外界提供统一的加密调用接口，支持DES软加密功能（OS：32位）；支持30所和56所加密机的接入功能。
&lt;strong&gt;批处理系统&lt;/strong&gt;：提供最基本的操作函数（文件入库、数据提取、报表输出等）；提供系统数据备份功能。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;系统架构&quot;&gt;系统架构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;./1496995188924.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;他带本交易流程：      请求：通讯模块-&amp;gt;I.1-&amp;gt;I.2-&amp;gt;I.3-&amp;gt;I.4-&amp;gt;通讯模块
应答：通讯模块-&amp;gt;O.1-&amp;gt;O.2-&amp;gt;O.3-&amp;gt;O.4-&amp;gt;通讯模块 本代他交易流程：
          请求：通讯模块-&amp;gt;O.1-&amp;gt;O.2-&amp;gt;O.3-&amp;gt;O.4-&amp;gt;通讯模块
		  应答：通讯模块-&amp;gt;I.1-&amp;gt;I.2-&amp;gt;I.3-&amp;gt;I.4-&amp;gt;通讯模块&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;##系统模块&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;守护进程模块  Daemon&lt;/li&gt;
  &lt;li&gt;桥接路由模块  Bridge&lt;/li&gt;
  &lt;li&gt;通讯服务模块
    &lt;blockquote&gt;
      &lt;p&gt;Commcup1  （南京银联通讯进程）
Commcup2  （总行银联通讯进程）
Commcup3 （杭州银联通讯进程）
Commcup4  （成都银联通讯进程）
CommDeb  （信用卡模块通讯进程）
CoEsbCli    （核心通讯进程）
CommAtmp （ATMP通讯进程）
CommPosP  （POSP通讯进程）
CoEsbSrv    （中间业务平台通讯进程）
Commcon	  （控制台通讯进程）&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;加密机模块：  HSM         （加密模块）
    &lt;blockquote&gt;
      &lt;p&gt;加密模块与加密机的连接与一般通讯程序的方法类似，只不过所连的是加密机而不是中心而已。本加密程序支持软加密，硬加密TCP以及硬加密串口等多种加密方式。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###Brigdge模块&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;初始化（BrigdgeInit)
守护进程Daemon fork子进程并调用系统函数execvp()替换进程上下文启动桥接进程Bridge,其中传入的参数分别为服务ID和服务序列号。之后通过srvId从数据库加载服务的配置信息到内存中。
对应调用代码如下：
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  nReturnCode = DbsSRVINF(DBS_SELECT, &amp;amp;tTblSrvInf);
  nReturnCode = MsqInit (gsSrvId, gatSrvMsq);
  nReturnCode = CvtInit (gatConvType, gatUsageTransRule);
  nReturnCode = BufChgLoad(1,&amp;amp;tBufChgRule);
  nReturnCode = IpcDftLoad(1,&amp;amp;tIpcDftRule);
  nReturnCode = DbsRouteInfLoad (&amp;amp;gnRouteInfNum, gatRouteInf);
  nReturnCode = DbsCardBinload (&amp;amp;gnCardBinNum, gatCardBin);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;其中加载服务和消息队列是调用嵌入式数据库开发语言*.pc&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;提供对于嵌入式SQL的支持，需要数据库厂商除了提供DBMS之外，还必须提供一些工具。为了实现对于嵌入式SQL的支持，技术上必须解决以下4个问题[1]：
宿主语言的编译器不可能识别和接受SQL文，需要解决如何将SQL的宿主语言源代码编译成可执行码。
宿主语言的应用程序如何与DBMS之间传递数据和消息。 如何把对数据的查询结果逐次赋值给宿主语言程序中的变量以供其处理。
数据库的数据类型与宿主语言的数据类型有时不完全对应或等价，如何解决必要的数据类型转换问题。
嵌入式工作原理
&lt;img src=&quot;./1497002360274.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;流程图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;st=&amp;gt;start: 启动Bridge
conDB=&amp;gt;operation: 连接数据库
loadSrv=&amp;gt;operation: 服务属性
loadMsq=&amp;gt;operation: 消息队列
loadConv=&amp;gt;operation: 转换规则
loadIpc=&amp;gt;operation: 内部结构体
loadRoute=&amp;gt;operation: 路由
sub=&amp;gt;subroutine: 加载配置信息
condb=&amp;gt;condition: 连接成功
Suc1=&amp;gt;condition: true
Suc2=&amp;gt;condition: true
Suc3=&amp;gt;condition: true
Suc4=&amp;gt;condition: true
Suc5=&amp;gt;condition: true
io=&amp;gt;inputoutput: 加载配置信息
e=&amp;gt;end: 结束

st-&amp;gt;conDB-&amp;gt;condb
condb(yes)-&amp;gt;loadSrv-&amp;gt;Suc1
Suc1(yes)-&amp;gt;loadMsq-&amp;gt;Suc2
Suc2(yes)-&amp;gt;loadConv-&amp;gt;Suc3
Suc3(yes)-&amp;gt;loadIpc-&amp;gt;Suc4
Suc4(yes)-&amp;gt;loadRoute-&amp;gt;e
Suc1(no)-&amp;gt;e
Suc2(no)-&amp;gt;e
Suc3(no)-&amp;gt;e
Suc4(no)-&amp;gt;e
condb(no)-&amp;gt;conDB
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;格式转换规则是系统比较复杂的内容：
```flow
st=&amp;gt;start: begin
loadConv=&amp;gt;operation: load tbl_conv_type
condb=&amp;gt;condition: true
i1=&amp;gt;operation: j=0
i2=&amp;gt;operation: j++
i3=&amp;gt;operation: usage_key=-1
con1=&amp;gt;condition: j&amp;lt;14
forv1=&amp;gt;operation: 判断是否为8583转换规则
forfld=&amp;gt;operation: nMLoadFldInf
formsg=&amp;gt;operation: nMLoadMsgInf
forconv=&amp;gt;operation: nMLoadConInf
forbmp=&amp;gt;operation: nMLoadBmpInf
foripc=&amp;gt;operation: nMLoadIpcInf&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;convInit=&amp;gt;inputoutput: ConvInit(FldInfKey,MsgInfKey,ConInfKey,BmpInfKey,IpcInfKey)&lt;/p&gt;

&lt;p&gt;ed=&amp;gt;end: end
st-&amp;gt;loadConv-&amp;gt;condb
condb(yes,right)-&amp;gt;i1-&amp;gt;i3-&amp;gt;con1
con1(yes,right)-&amp;gt;i2(right)-&amp;gt;i3
con1(no)-&amp;gt;forv1-&amp;gt;convInit
convInit-&amp;gt;forfld-&amp;gt;formsg-&amp;gt;forconv-&amp;gt;forbmp-&amp;gt;foripc(left)-&amp;gt;ed
condb(no)-&amp;gt;ed
```
 报文转换我们转换可以把它比作为衣服加工厂，不同款式的衣服代表不同的交易类型，不同的衣服他们所需的衣服部件也不同有的需要衣领有的不需要衣领更好的比拟了不同交易所需的报文域不同。不同的尺寸也代表的了各域的的长度。对于工厂生产当然存在流水线，得确定下一个环节进行进一步加工。其实银联前置系统也是按此原理设计的。系统中涉及的三大对象就是报文域、交易报文、转换链路。对于通讯工具如消息队列，和socket共享内存，线程池、数据库连接池等都是系统的DAO层，没有上升到业务服务层。为了清晰了解转换过程我们先从交易报文说起，对于发至birdge桥接模块，他需要外部的报文转换为内部结构体IPC(此IPC并非是unix系统间通讯机制)而是针对报文所存在的属性设置的结构体，比如交易中设计的主账号，交易金额，发卡机构识别码，受理机构识别码等都是内部结构的字段。那如何提取报文到内部结构体呢。对于银联前置系统的设计是不同模块他们都有一样的内部结构体容易IPC,包括所有的域信息，转换中将不同的域赋值给IPC结构体的对应字段中。有值即给对应字段赋值，没有则赋值为空，系统中用标记指示位来识别(Y/N)。那如何区分不同的交易类型呢，系统内部设置了交易码，不同的交易码对应不同交易类型，通过关键域的值来匹配交易码，首先是F01交易类型、F03交易处理码的的前两位、F25服务条件码和F60.2.5终端类型来判断。确定了衣服的款式，接下来要确定它的尺寸。&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;加载域属性(nMLoadFldInf)
    &lt;blockquote&gt;
      &lt;p&gt;8583每个域包括可比拟为两个对象域值和域长度
比如F02主账号3136363232343234323030303030303231(ans)=&amp;gt;
166224242000000021
前两位16代表域值长度后面的域值，相对于主账号为变长域，但是有些域为定长比如交易处理码为6位定长字符，那如何区分是定长的域还是不定长的域呢。其实这对我们交易报文中不知晓是否为定长报文域，对我们提取报文域值没有影响，只要知道域的长度按长取值就可以了。但是如何截取呢，没有对应的尺码该如何裁剪缝衣。考虑到此报文只涉及到的是交易类报文主要包括余额查询，取款，转账等。不同的交易他们所需的报文是各银行和银联约定俗成的。他们也用最小位图和最大位图来描述那些域是所需，那些不需要出现。位图
对于某些域中存在&lt;/p&gt;

    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 08 Jun 2017 00:00:00 +0800</pubDate>
        <link>http://ninowon.com/%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1/2017/06/08/%E9%93%B6%E8%81%94%E5%89%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F.html</link>
        <guid isPermaLink="true">http://ninowon.com/%E6%94%AF%E4%BB%98%E4%B8%9A%E5%8A%A1/2017/06/08/%E9%93%B6%E8%81%94%E5%89%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F.html</guid>
        
        <category>支付业务</category>
        
        
        <category>支付业务</category>
        
      </item>
    
      <item>
        <title>Hibernate FAQ</title>
        <description>
&lt;p&gt;1.生成的*.hbm.xml无法被SaxReader解析解析&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在确保配置文件中属性名和POJO的类属性名一致和配置文件中的字段属性名与数据库字段一致的前提下

检查Hirbernate的头文件中的dtd文件是否能访问（点击左键即可访问),如果无法访问，可以有两种原因：
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(1)配置的xml 的key键不存在，可以自己添加。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;具体步骤：Window&amp;gt;&amp;gt;Preferencesl&amp;gt;&amp;gt;MyEclipse&amp;gt;&amp;gt;FilesandEditors&amp;gt;&amp;gt;XML&amp;gt;&amp;gt;XML_Catolog&amp;gt;&amp;gt;uses_specified_entries&amp;gt; add 

location:本地下载的DTmD文件

key:值为你*.hbm.xml 制定本地key。

如：&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(2) 无法访问外网&lt;/p&gt;
</description>
        <pubDate>Mon, 22 May 2017 00:00:00 +0800</pubDate>
        <link>http://ninowon.com/%E5%90%8E%E7%AB%AF/2017/05/22/Hibernate-FAQ.html</link>
        <guid isPermaLink="true">http://ninowon.com/%E5%90%8E%E7%AB%AF/2017/05/22/Hibernate-FAQ.html</guid>
        
        <category>jekyll</category>
        
        
        <category>后端</category>
        
      </item>
    
      <item>
        <title>crete blog page</title>
        <description>
&lt;p&gt;系统环境:ubuntu16.04 _X86_64
所需的应用程序: git,nodejs,ruby-dev,zliblg-dev&lt;/p&gt;

&lt;p&gt;基础的环境可以参考jekyll 的官方网站&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ninowon.com/assets/pdf.Jekyll.pdf&quot;&gt;download&lt;/a&gt;
&lt;a href=&quot;http://jekyllrb.com/docs/plugins&quot;&gt;jekyll plugins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;install application&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;apt-get install nodejs&lt;/li&gt;
  &lt;li&gt;apt-get install ruby-dev&lt;/li&gt;
  &lt;li&gt;apt-get install zliblg-dev&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;create dir&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mkdir myblog&lt;/li&gt;
  &lt;li&gt;cd myblog&lt;/li&gt;
  &lt;li&gt;git clone https://github.com/drsin/drsin.github.io.git&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;install env&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;./script/bootstrap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;create sit&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;./script/cbuild&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;start server&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;./script/server&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 01 May 2017 00:00:00 +0800</pubDate>
        <link>http://ninowon.com/%E5%B7%A5%E5%85%B7/2017/05/01/create-blog-site.html</link>
        <guid isPermaLink="true">http://ninowon.com/%E5%B7%A5%E5%85%B7/2017/05/01/create-blog-site.html</guid>
        
        <category>jekyll</category>
        
        
        <category>工具</category>
        
      </item>
    
      <item>
        <title>Bootstrap-table实现按列搜索</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#简要&quot; id=&quot;markdown-toc-简要&quot;&gt;简要&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#下载使用&quot; id=&quot;markdown-toc-下载使用&quot;&gt;下载使用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ok&quot; id=&quot;markdown-toc-ok&quot;&gt;ok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;简要&quot;&gt;简要&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;当客户端分页显示数据时就经常用的一个全局搜索框，他会在所有列内里面筛选我们需要的信息，而有些时候数据量太大或者相似度高就用起来不太方便，这时就诞生了按列搜索的高级工具栏&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;下载使用&quot;&gt;下载使用&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;需要引入 &lt;a href=&quot;https://github.com/JiaoHongwei/persion_jar&quot;&gt;bootstrap-table-toolbar.js&lt;/a&gt; ，下载完成引入到原有的页面
    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;${ctxStatic}/plugins/bootstrap-table/bootstrap-table-toolbar.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;table&lt;/code&gt; 中添加 属性&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; data-advanced-search=&quot;true&quot;
    
data-id-table=&quot;advancedTable&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table table-primary mb30&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;table-osver-tab2&quot;&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;data-advanced-search=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;data-id-table=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;advancedTable&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;tbody&amp;gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ok&quot;&gt;ok&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;实现以下效果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://jiaohongwei.github.io/images/2017-03/20170331194730.png&quot; alt=&quot;Object&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;官方demo  http://issues.wenzhixin.net.cn/bootstrap-table/#extensions/toolbar.html&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 01 Apr 2017 03:34:55 +0800</pubDate>
        <link>http://ninowon.com/%E5%89%8D%E7%AB%AF/2017/04/01/Bootstrap-table%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E6%8C%89%E5%88%97%E6%90%9C%E7%B4%A2.html</link>
        <guid isPermaLink="true">http://ninowon.com/%E5%89%8D%E7%AB%AF/2017/04/01/Bootstrap-table%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E6%8C%89%E5%88%97%E6%90%9C%E7%B4%A2.html</guid>
        
        <category>Bootstrap-Table</category>
        
        
        <category>前端</category>
        
      </item>
    
      <item>
        <title>Jekyll 添加 FancyBox 图片插件</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#简要&quot; id=&quot;markdown-toc-简要&quot;&gt;简要&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#下载使用&quot; id=&quot;markdown-toc-下载使用&quot;&gt;下载使用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#ok&quot; id=&quot;markdown-toc-ok&quot;&gt;ok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;简要&quot;&gt;简要&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;今天终于解决了我的博客中一个大问题，插入的图片由于过大无法完整展示，导致压缩不清晰现象，严重影响博客质量。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Markdown 语法中的图片我们一般是如此写法&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    ![tag](url &quot;name&quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;生成的 html 为&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;我们如果要使用（譬如）FancyBox 的话，则需要如下的链接才可&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;下载使用&quot;&gt;下载使用&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先下载 &lt;a href=&quot;https://github.com/fancyapps/fancyBox/zipball/v2.1.5&quot;&gt;FancyBox&lt;/a&gt; ，解压到你的主题文件夹，譬如我的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;theme/fancybox&lt;/code&gt; 下，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes&lt;/code&gt;文件夹中模板文件，在&lt;code class=&quot;highlighter-rouge&quot;&gt;head.html&lt;/code&gt;中添加&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/theme/fancybox/source/jquery.fancybox.css?v=2.1.5&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;footer.html&lt;/code&gt; 中添加&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/theme/fancybox/lib/jquery-1.10.1.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/theme/fancybox/source/jquery.fancybox.pack.js?v=2.1.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 给图片添加链接&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;p img&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;strA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;a id='yourid' href='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;'&amp;gt;&amp;lt;/a&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wrapAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    
        &lt;span class=&quot;c1&quot;&gt;// fancybox&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#yourid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fancybox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                                  &lt;span class=&quot;na&quot;&gt;openEffect&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'elastic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                  &lt;span class=&quot;na&quot;&gt;closeEffect&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'elastic'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                              &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;ok&quot;&gt;ok&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;将代码提交上去，重新打开你的博客，点击图片，就会出现以下效果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://jiaohongwei.github.io/images/2017-03/20170326171028.png&quot; alt=&quot;Object&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;简直6到没朋友了，再也不愁写博客时图片被压缩显示的现象了，给FancyBox一个大写的赞！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FancyBox&lt;/code&gt; 具体用法 http://fancyapps.com/fancybox/&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 27 Mar 2017 00:49:50 +0800</pubDate>
        <link>http://ninowon.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E6%BA%90%E6%8A%80%E6%9C%AF/2017/03/27/Jekyll%E6%B7%BB%E5%8A%A0FancyBox%E6%8F%92%E4%BB%B6%E9%A2%84%E8%A7%88%E5%9B%BE%E7%89%87.html</link>
        <guid isPermaLink="true">http://ninowon.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E6%BA%90%E6%8A%80%E6%9C%AF/2017/03/27/Jekyll%E6%B7%BB%E5%8A%A0FancyBox%E6%8F%92%E4%BB%B6%E9%A2%84%E8%A7%88%E5%9B%BE%E7%89%87.html</guid>
        
        <category>GitHub</category>
        
        <category>插件</category>
        
        
        <category>架构设计与开源技术</category>
        
      </item>
    
      <item>
        <title>使用Gecco爬取博客（一）</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#简要&quot; id=&quot;markdown-toc-简要&quot;&gt;简要&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#开发&quot; id=&quot;markdown-toc-开发&quot;&gt;开发&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#运行&quot; id=&quot;markdown-toc-运行&quot;&gt;运行&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#源码下载&quot; id=&quot;markdown-toc-源码下载&quot;&gt;源码下载&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;简要&quot;&gt;简要&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Gecco是一款用java语言开发的轻量化的易用的网络爬虫，不同于Nutch这样的面向搜索引擎的通用爬虫，Gecco是面向主题的爬虫。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;官网：     http://www.geccocrawler.com/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;开发&quot;&gt;开发&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;新建一个实体&lt;code class=&quot;highlighter-rouge&quot;&gt;MyGitHubArticle.java&lt;/code&gt;类来存储所要爬取的文章列表&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jiaohongwei&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myGitHub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.GeccoEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.annotation.Gecco&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.annotation.HtmlField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.annotation.Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.spider.HtmlBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.AllArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.NoArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
   &lt;span class=&quot;cm&quot;&gt;/**
    * Created by jiaohongwei on 2017/3/22.
    */&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 使用lombok 消除 Java 代码的冗长。&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@lombok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Setter&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//==所有属性的的get方法&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@lombok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Getter&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//== set方法&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//==无参构造&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;//==全参构造&lt;/span&gt;
   &lt;span class=&quot;nd&quot;&gt;@Gecco&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matchUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://blog.jiaohongwei.cn/archive/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pipelines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;myGitHubPipeline&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyGitHubArticle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HtmlBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   
       &lt;span class=&quot;cm&quot;&gt;/**
        * 此demo 用来爬取我的GitHub博客列表，地址： http://blog.jiaohongwei.cn/archive/
        */&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7127412585200687225L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
       &lt;span class=&quot;c1&quot;&gt;//文章集合&lt;/span&gt;
       &lt;span class=&quot;nd&quot;&gt;@Text&lt;/span&gt;
       &lt;span class=&quot;nd&quot;&gt;@HtmlField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cssPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;body &amp;gt; div.page.clearfix &amp;gt; div.left &amp;gt; ul &amp;gt; li&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blogs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   
       &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;GeccoEngine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.jiaohongwei.demo.myGitHub&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://blog.jiaohongwei.cn/archive/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                   &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;存储博客信息的实体类&lt;code class=&quot;highlighter-rouge&quot;&gt;Blog.java&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jiaohongwei&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myGitHub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.annotation.HtmlField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.annotation.Text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.spider.HtmlBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.AllArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.Data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;lombok.NoArgsConstructor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;cm&quot;&gt;/**
   * Created by jiaohongwei on 2017/3/22.
   */&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Data&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@lombok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Setter&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@lombok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Getter&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@NoArgsConstructor&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@AllArgsConstructor&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Blog&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HtmlBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serialVersionUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7127412585200687225L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
  
      &lt;span class=&quot;c1&quot;&gt;//时间&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Text&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@HtmlField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cssPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;li &amp;gt; time&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;//标题&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Text&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@HtmlField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cssPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;li &amp;gt; a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;//分类&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Text&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@HtmlField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cssPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;li &amp;gt; span.categories &amp;gt; a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
      &lt;span class=&quot;c1&quot;&gt;//标签&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Text&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@HtmlField&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cssPath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;li&amp;gt; span.pageTag &amp;gt; a&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Blog{&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;time='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;, title='&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'\''&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;, categories=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;&quot;, tags=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                  &lt;span class=&quot;sc&quot;&gt;'}'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;接口HtmlBean说明该爬虫是一个解析html页面的爬虫（gecco还支持json格式的解析）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注解@Gecco告知该爬虫匹配的url格式(matchUrl)和内容抽取后的bean处理类（pipelines处理类采用管道过滤器模式，可以定义多个处理类）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注解@RequestParameter可以注入url中的请求参数，如@RequestParameter(“user”)表示匹配url中的{user}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注解@HtmlField表示抽取html中的元素，cssPath采用类似jquery的css selector选取元素&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注解@Text表示获取@HtmlField抽取出来的元素的text内容&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注解@Html表示获取@HtmlField抽取出来的元素的html内容（如果不指定默认为@Html）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;GeccoEngine表示爬虫引擎，通过create()初始化，通过start()/run()运行。可以配置一些启动参数如：扫描@Gecco注解的包名classpath；开始抓取的url地址star；抓取线程数thread；抓取完一个页面后的间隔时间interval(ms)等
    gecco&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;业务逻辑处理类&lt;code class=&quot;highlighter-rouge&quot;&gt;MyGitHubPipeline.java&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;gecco采用管道过滤器模式灵活的实现业务逻辑处理，首先实现一个特定的管道过滤器，&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jiaohongwei&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;myGitHub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.annotation.PipelineName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.geccocrawler.gecco.pipeline.Pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;cm&quot;&gt;/**
     * Created by jiaohongwei on 2017/3/22.
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@PipelineName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;myGitHubPipeline&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyGitHubPipeline&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pipeline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyGitHubArticle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
        &lt;span class=&quot;cm&quot;&gt;/**
         * gecco采用管道过滤器模式灵活的实现业务逻辑处理，首先实现一个特定的管道过滤器，
         * @param myGitHubArticle
         */&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyGitHubArticle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myGitHubArticle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//TODO  可以持久化到数据库或文件&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myGitHubArticle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBlogs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Blog&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;运行&quot;&gt;运行&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;运行&lt;code class=&quot;highlighter-rouge&quot;&gt;MyGitHubArticle.java&lt;/code&gt;类中的main方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://jiaohongwei.github.io/images/2017-03/20170326153732.png&quot; alt=&quot;Object&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;这只是一个最简单的小demo，后续有时间会继续把和spring 结合业务的demo放上来&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;源码下载&quot;&gt;源码下载&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/JiaoHongwei/Gecco-demo&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 26 Mar 2017 23:12:50 +0800</pubDate>
        <link>http://ninowon.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E6%BA%90%E6%8A%80%E6%9C%AF/2017/03/26/Gecco-java-%E7%88%AC%E8%99%AB.html</link>
        <guid isPermaLink="true">http://ninowon.com/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%BC%80%E6%BA%90%E6%8A%80%E6%9C%AF/2017/03/26/Gecco-java-%E7%88%AC%E8%99%AB.html</guid>
        
        <category>Gecco</category>
        
        <category>爬虫</category>
        
        
        <category>架构设计与开源技术</category>
        
      </item>
    
  </channel>
</rss>
